# ===================================================================
# Comunidade Data Scienc - ComunidadeDS - https://comunidadeds.com/

# Curso Analista de Dados
# Ciclo 07 - Modularizando o c√≥digo, criando fun√ß√µes
# Professor: Meigarom Lopes
# Aluno: Alfredo Junior Albieri
# Ano letivo: 2025
# ===================================================================

# ===================
# Libraries
# ===================
from haversine import haversine
import plotly.express as px
import plotly.graph_objects as go

# ===================
# Bibliotecas
# ===================
import folium
import haversine
import pandas as pd 
import numpy as np
from datetime import datetime
import streamlit as st
from PIL import Image
from streamlit_folium import folium_static

# ------------------
# Ajusta a largura da p√°gina de apresenta√ß√£o
# ------------------
st.set_page_config(
    page_title="Vis√£o Entregadores",
    page_icon="üöö",
    layout="wide",          # valores: "centered" ou "wide"
    initial_sidebar_state="expanded"  # ou "collapsed"
)

# ===================================
# Fun√ß√µes
# ===================================
# Limpeza dos dados
def clean_code( df1 ):
    """ Esta fun√ß√£o tem a responsabilidade de limpar o dataframe

        Tipos de limpeza:
        1. Remo√ß√£o dos NaN
        2. Mudan√ßa do tipo da coluna de dados
        3. Remo√ß√£o dos espa√ßos das vari√°veis de texto
        4. Formata√ß√£o da coluna de datas
        5. Limpeza da coluna de tempo (remo√ß√£o do texto da vari√°vel num√©rica)

        Input: Dataframe
        Output: Dataframe
    """
    # 1. convertendo a coluna Age de texto para n√∫mero
    linhas_selecionadas = (df1['Delivery_person_Age'] != 'NaN ' )
    df1 = df1.loc[linhas_selecionadas, :].copy()
    
    linhas_selecionadas = (df1['Road_traffic_density'] != 'NaN ' )
    df1 = df1.loc[linhas_selecionadas, :].copy()
    
    linhas_selecionadas = (df1['City'] != 'NaN ' )
    df1 = df1.loc[linhas_selecionadas, :].copy()
    
    linhas_selecionadas = (df1['Festival'] != 'NaN ' )
    df1 = df1.loc[linhas_selecionadas, :].copy()
    
    df1['Delivery_person_Age'] = df1['Delivery_person_Age'].astype(int)
    
    # 2. convertendo a coluna Ratings de texto para numero decinal (float)
    df1['Delivery_person_Ratings'] = df1['Delivery_person_Ratings'].astype(float)
    
    # 3. convertendo a coluna Order_Date de texto para data
    df1['Order_Date'] = pd.to_datetime(df1['Order_Date'], format='%d-%m-%Y')
    
    # 4. convertendo a coluna multiple_deliveries de texto para numero inteiro (int)
    linhas_selecionadas = (df1['multiple_deliveries'] != 'NaN ' )
    df1 = df1.loc[linhas_selecionadas, :].copy()
    
    ## 5. Removendo os espa√ßos dentro de strings/texto/object
    #df1 = df1.reset_index(drop=True)
    #for i in range(len(df1)):
    #    df1.loc[i, 'ID'] = df1.loc[i, 'ID'].strip()
    
    # 6. Removendo os espa√ßos dentro de strings/texto/object
    df1.loc[:, 'ID'] = df1.loc[:,'ID'].str.strip()
    df1.loc[:, 'Road_traffic_density'] = df1.loc[:, 'Road_traffic_density'].str.strip()
    df1.loc[:, 'Type_of_order'] = df1.loc[:, 'Type_of_order'].str.strip()
    df1.loc[:, 'Type_of_vehicle'] = df1.loc[:, 'Type_of_vehicle'].str.strip()
    df1.loc[:, 'City'] = df1.loc[:, 'City'].str.strip()
    df1.loc[:, 'Festival'] = df1.loc[:, 'Festival'].str.strip()
    
    # Limpando a colunas Time_taken
    df1['Time_taken(min)'] = df1['Time_taken(min)'].apply( lambda x: x.split( '(min)')[1] )
    df1['Time_taken(min)'] = df1['Time_taken(min)'].astype( int )

    return df1

# Fun√ß√µes das Metricas do neg√≥cio ---------------------------------------
def top_delivers( df1, top_asc ):                
    df2 = ( df1.loc[:, ['Delivery_person_ID', 'City', 'Time_taken(min)']]
               .groupby( ['City', 'Delivery_person_ID'] )
               .max().sort_values(['City', 'Time_taken(min)'], ascending=top_asc)
               .reset_index() )

    df_aux01 = df2.loc[df2['City'] == 'Metropolitian', :].head(10)
    df_aux02 = df2.loc[df2['City'] == 'Urban', :].head(10)
    df_aux03 = df2.loc[df2['City'] == 'Semi-Urban', :].head(10)

    df3 = pd.concat( [df_aux01, df_aux02, df_aux03] ).reset_index( drop=True)

    return df3

# ------------------ In√≠cio da estrutura l√≥gica do c√≥digo ---------------------
# ------------------
# Import Dataset
# ------------------
df = pd.read_csv("dataset/train.csv")

# ------------------
# limpando os dados
# ------------------
df1 = clean_code( df )

# ------------------
# Barra Lateral
# ------------------

st.sidebar.markdown(
    """
    ### üîó Acesso R√°pido √†s P√°ginas
    - [üìä Home](./Home.py)
    - [üìä Vis√£o da Empresa](./pages/1_visao_empresa.py)
    - [üõµ Vis√£o dos Entregadores](./pages/2_visao_entregadores.py)
    - [üçΩÔ∏è Vis√£o dos Restaurantes](./pages/3_visao_restaurantes.py)
    """)

image_path = 'image/Curry_companhy.jpg'
image = Image.open(image_path)
st.sidebar.image(image, width=60)

st.sidebar.markdown('# Curry Company')
st.sidebar.markdown('## Fastest Delivery in Town')
st.sidebar.markdown("""---""")

st.sidebar.markdown('## Selecione a data limite')

date_slider = st.sidebar.slider(
    'At√© qual valor?',
    value=datetime(2022, 4, 6),          # precisa estar entre min e max
    min_value=datetime(2022, 2, 11),
    max_value=datetime(2022, 4, 13),
    format='DD-MM-YYYY'
)

# st.header(date_slider.strftime('%d-%m-%Y'))
st.sidebar.markdown("""---""")

traffic_options = st.sidebar.multiselect(
    'Quais as condi√ß√µes do tr√¢nsito?',
    ['Low', 'Midium', 'High', 'Jam'],
    default=['Low', 'Midium', 'High', 'Jam'])

st.sidebar.markdown("""---""")
st.sidebar.markdown('#### Powerred by Comunidade DS')

# Filtros de data
linhas_selecionadas = df1['Order_Date'] < date_slider
df1 = df1.loc[linhas_selecionadas, :]

# Filtro de tr√¢nsito
linhas_selecionadas = df1['Road_traffic_density'].isin(traffic_options)
df1 = df1.loc[linhas_selecionadas, :]

# ------------------
# layout no Streamlit
# Ver documentos e escolher o que quer usar https://docs.streamlit.io
# ------------------
st.header("Marketplace - Vis√£o Entregadores")

tab1, tab2, tab3 = st.tabs(['Vis√£o Gerencial', '_', '_'])

with tab1:
    with st.container():
        st.title('Overall Metrics')

        col1, col2, col3, col4 = st.columns(4, gap='large')
        with col1:
            # A maior idade dos entregadores
            #st.subheader('Maior de idade')
            maior_idade = df1.loc[:, 'Delivery_person_Age'].max()
            col1.metric('Maior idade', maior_idade)

        with col2:
            # A menor idade dos entregadores
            #st.subheader('Menor de idade')        
            menor_idade = df1.loc[:, 'Delivery_person_Age'].min()
            col2.metric('Menor idade', menor_idade)

        with col3:
            # A melhor condi√ß√£o de ve√≠culo            
            #st.subheader('Melhor condi√ß√£o de ve√≠culo')
            melhor_condicao = df1.loc[:, 'Vehicle_condition'].max()
            col3.metric('Melhor condi√ß√£o de ve√≠culo', melhor_condicao)

        with col4:
            # A pior condi√ß√£o de ve√≠culo            
            #st.subheader('Pior condi√ß√£o de ve√≠culo')
            pior_condicao = df1.loc[:, 'Vehicle_condition'].min()
            col4.metric('Pior condi√ß√£o de ve√≠culo', pior_condicao)
    
    with st.container():
        st.markdown("""---""")
        st.title('Avalia√ß√µes')

        col1, col2 = st.columns(2)
        with col1:
            st.markdown('##### Avalia√ß√µes m√©dia por entregador')
            df_avg_ratings_per_deliver = ( df1.loc[:, ['Delivery_person_Ratings', 'Delivery_person_ID']]
                                              .groupby('Delivery_person_ID')
                                              .mean()
                                              .reset_index() )
            st.dataframe(df_avg_ratings_per_deliver)

        with col2:
            st.markdown('##### Avalia√ß√£o m√©dia por transito') 
            # Com a fun√ß√£o agrega√ß√£o (agg)
            df_avg_std_rating_by_traffic = ( df1.loc[:, ['Delivery_person_Ratings', 'Road_traffic_density' ]]
                                                .groupby('Road_traffic_density')
                                                .agg( {'Delivery_person_Ratings': ['mean', 'std']} ))

            # Mudan√ßa de nome das colunas
            df_avg_std_rating_by_traffic.columns = ['delivery_mean','delivery_std']

            # Reset do index
            df_avg_std_rating_by_traffic = df_avg_std_rating_by_traffic.reset_index()

            st.dataframe(df_avg_std_rating_by_traffic)

            
            st.markdown('##### Avalia√ß√£o m√©dia por clima')
            # Com a fun√ß√£o agrega√ß√£o (agg)
            df_avg_std_rating_by_Weatherconditions = ( df1.loc[:, ['Delivery_person_Ratings', 'Weatherconditions' ]]
                                                          .groupby('Weatherconditions')
                                                          .agg( {'Delivery_person_Ratings': ['mean', 'std']} ))

            # Mudan√ßa de nome das colunas
            df_avg_std_rating_by_Weatherconditions.columns = ['delivery_mean','delivery_std']

            # Reset do index
            df_avg_std_rating_by_Weatherconditions = df_avg_std_rating_by_Weatherconditions.reset_index()

            st.dataframe(df_avg_std_rating_by_Weatherconditions)



    with st.container():
        st.markdown("""---""")
        st.title('Velocidade de entrega')

        col1, col2 = st.columns(2)
        with col1:
            st.markdown('##### Top entregadores mais r√°pidos')
            df3 = top_delivers( df1, top_asc=True )
            st.dataframe(df3)
          
        with col2:
            st.markdown('##### Top entregadores mais lentos')
            df3 = top_delivers( df1, top_asc=False )
            st.dataframe(df3)
